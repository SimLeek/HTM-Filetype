# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Column

import flatbuffers

class Column(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsColumn(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Column()
        x.Init(buf, n + offset)
        return x

    # Column
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Column
    def PositionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Column
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Column
    def ConnectionsUID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Column
    def Cells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Cell import Cell
            obj = Cell()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Column
    def CellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Column
    def LastUsedIteration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ColumnStart(builder): builder.StartObject(5)
def ColumnAddPositionType(builder, positionType): builder.PrependUint8Slot(0, positionType, 0)
def ColumnAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def ColumnAddConnectionsUID(builder, connectionsUID): builder.PrependUint64Slot(2, connectionsUID, 0)
def ColumnAddCells(builder, cells): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cells), 0)
def ColumnStartCellsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ColumnAddLastUsedIteration(builder, lastUsedIteration): builder.PrependUint32Slot(4, lastUsedIteration, 0)
def ColumnEnd(builder): return builder.EndObject()
